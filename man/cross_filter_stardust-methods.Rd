% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-cross_filter_stardust.R
\name{cross_filter_stardust-methods}
\alias{cross_filter_stardust-methods}
\alias{cross_filter_stardust}
\alias{cross_filter_stardust,missing-method}
\alias{cross_filter_stardust,mcnebula-method}
\alias{cross_filter_quantity,mcnebula,numeric,numeric-method}
\alias{cross_filter_quantity}
\alias{cross_filter_score,mcnebula,character,numeric,numeric-method}
\alias{cross_filter_score}
\alias{cross_filter_identical,mcnebula,numeric,numeric-method}
\alias{cross_filter_identical}
\title{'Cross' filter for 'stardust_classes' data}
\usage{
\S4method{cross_filter_stardust}{missing}()

\S4method{cross_filter_stardust}{mcnebula}(
  x,
  min_number,
  max_ratio,
  types,
  cutoff,
  tolerance,
  hierarchy_range,
  identical_factor
)

\S4method{cross_filter_quantity}{mcnebula,numeric,numeric}(x, min_number, max_ratio)

\S4method{cross_filter_score}{mcnebula,character,numeric,numeric}(x, types, cutoff, tolerance)

\S4method{cross_filter_identical}{mcnebula,numeric,numeric}(x, hierarchy_range, identical_factor)
}
\arguments{
\item{x}{\linkS4class{mcnebula} object.}

\item{min_number}{numeric(1). Value in [1, ).
For classified 'features' of chemical classes, minimum quantity.}

\item{max_ratio}{numeric(1). Value in (0, 1].
For classified 'features' of chemical classes,
maximum proportion: the 'features' quantity versus
all 'features' (unique) quantity of all classes.}

\item{types}{character.
The target attributes for Goodness assessment. See details.
There can be plural ones.}

\item{cutoff}{numeric.
For Goodness assessment of target attributes.
The size of the value depends on the target attribute.
Note, the \code{cutoff} must be 'vector' the same length as \code{types}.}

\item{tolerance}{numeric. Value in (0, 1).
For Goodness assessment of target attributes. The thresholds of Goodness.
Note, the \code{tolerance} must be 'vector' the same length as \code{types}.}

\item{hierarchy_range}{numeric(2).
The hierarchy range of chemical classification passed for similarity assessment
of chemical classes. The hierarchy:
\itemize{
\item 10: ...
\item n: ...
\item 5: Classes of Level 5.
\item 4: Classes of Subclass.
\item 3: Classes of Class.
\item 2: Classes of Super Class.
\item 1: ...
\item 0: ...
}}

\item{identical_factor}{numeric(1). Value in (0, 1).
Threshold value for classes similarity assessment.}
}
\description{
'Cross' filter for 'stardust_classes' data.
Use 'features_annotation' data and 'stardust_classes' data for
chemical classes filtering. Run after \code{\link[=create_stardust_classes]{create_stardust_classes()}}.
Methods \code{cross_filter_stardust} are integration of the following three method:
\itemize{
\item \code{cross_filter_quantity}
\item \code{cross_filter_score}
\item \code{cross_filter_identical}
}

\code{cross_filter_stardust()}:
get the default parameters for the method
\code{cross_filter_stardust}.

\code{cross_filter_stardust(x, ...)}:
use the default parameters whatever 'missing'
while performing the method \code{cross_filter_stardust}.

\code{cross_filter_quantity}:
Filter chemical classes in 'stardust_classes' data according to:
\itemize{
\item Absolute quantity: the classified 'features' of the class.
\item Relative proportion: the classified 'features' of the class
comparing with all features of all classes.
}

\code{cross_filter_score}
Filter chemical classes in 'stardust_classes' data according to the attributes
in 'features_annotation' data.
Set cut-off value of attributes for all 'features', then inspect overall
satisfaction of the classified 'features' of the class.

\code{cross_filter_identical}
Filter chemical classes in 'stardust_classes' data by comparing the classified 'features'.
}
\details{
Compared to the chemical class filtering within PPCP data by \code{\link[=create_stardust_classes]{create_stardust_classes()}},
the filtering within 'stardust_classes' data by \code{\link[=cross_filter_stardust]{cross_filter_stardust()}} is
fundamentally different.
\itemize{
\item For \code{\link[=create_stardust_classes]{create_stardust_classes()}},
the PPCP data belongs to each 'feature'. When performing the filtering,
only simple threshold conditions or absolute conditions
are set to filter the chemical classes;
there is no crossover between the different attributes and
no crossover between the 'features'.
Therefore, we consider this as 'inner' filtering.
\item For \code{\link[=cross_filter_stardust]{cross_filter_stardust()}},
the data of the chemical classes and their classified 'features', i.e.
'stardust_classes' data, were combined and then grouped upon the chemical classes.
After grouping, each chemical class has a certain quantity of "features".
When filtering, statistics may be performed on 'features' data within a group;
statistics may be performed on these data in conjunction with 'features_annotation' data;
and statistics may be performed to compare groups with each other.
As its crossover, we consider this as 'cross' filtering.
}

\bold{Cross_filter_quantity}
Set 'features' quantity limitation for each group.
The groups with too many 'features' or too few 'features' would be filtered out.
This means the chemical class would be filtered out.
These thresholds are about:
\itemize{
\item Minimum quantity: the 'features'.
\item Maximum proportion: the 'features' quantity versus
all 'features' (unique) quantity of all groups.
}

The purpose of this step is to filter out chemical classes that have
too large or too subtle a conceptual scope. For example, 'Organic compounds',
which covers almost all compounds that can be detected in metabolomics data,
is too large in scope to be of any help to our biological research.
The setting of parameters is not absolute, and there is no optimal solution.
Users can draw up thresholds according to the necessity of the study.

\bold{Cross_filter_score}
This step associate 'stardust_classes' data with 'features_annotation' data.
For each group, the Goodness assessment is performed
for each target attribute (continuous attribute, generally be a scoring
attribute of compound identification, such as 'tani.score'). If the group met all the
expected Goodness, the chemical class would be retained; otherwise,
the chemical class would be filtered out.
The Goodness (G) related with the 'features' within the group:
\itemize{
\item n: the quantity of 'features' of which target attributes satisfied with the cut-off.
\item N: the quantity of all 'features'.
}

The Goodness: G = n / N.

The assessment of Goodness is related to the parameters of \code{cutoff}
and \code{tolerance}:
\itemize{
\item Expected Goodness, i.e. value of \code{tolerance}.
\item Actual Goodness, related to parameter \code{cutoff}. G = n / N.
}

Goodness assessment can be given to plural target attributes.
Note that the chemical class would retained only if
it passed the Goodness assessment of all target attributes.

The main purpose of this step is to filter out those chemical classes with
too many 'features' of low structural identification.

\bold{Cross_filter_identical}
A similarity assessment of chemical classes.
Set a hierarchical range for chemical classification and let groups (
each group, i.e. a chemical class with its classified 'features')
within this range be compared for similarity to each other. For two groups,
if the classified 'features' almost identical to each other, the chemical
class represented by one of the groups would be discarded.
The assessment of identical degree of two groups (A and B):
\itemize{
\item x: ratio of the classified 'features' of A belonging to B
\item y: ratio of the classified 'features' of B belonging to A
\item i: value of parameter \code{identical_factor}
}

If x > i and y > i, the two groups would be considered as identical.
Then the group with fewer 'features' would be discarded.

The purpose of this step is to filter out classes that may incorporate
each other and are similar in scope. The in silico prediection approach may not be able
to distinguish which class the potential compound belongs to from the LC-MS/MS spectra.
}
\examples{
\dontrun{
cross_filter_quantity(...)
}
\dontrun{
cross_filter_score(...)
}
\dontrun{
cross_filter_identical(...)
}
}
