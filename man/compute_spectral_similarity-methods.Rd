% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-compute_spectral_similarity.R
\name{compute_spectral_similarity-methods}
\alias{compute_spectral_similarity-methods}
\alias{compute_spectral_similarity}
\alias{compute_spectral_similarity,missing,missing,missing,missing,missing-method}
\alias{compute_spectral_similarity,mcnebula,ANY,ANY,ANY,ANY-method}
\alias{compute_spectral_similarity,missing,missing,missing,lightSpectrum,lightSpectrum-method}
\alias{compute_spectral_similarity,missing,missing,missing,data.frame,data.frame-method}
\alias{compute_spectral_similarity,mcnebula,logical,logical,missing,missing-method}
\title{Compute MS2 spectral similarity}
\usage{
\S4method{compute_spectral_similarity}{missing,missing,missing,missing,missing}()

\S4method{compute_spectral_similarity}{mcnebula,ANY,ANY,ANY,ANY}(x, within_nebula, recompute, sp1, sp2)

\S4method{compute_spectral_similarity}{missing,missing,missing,lightSpectrum,lightSpectrum}(sp1, sp2)

\S4method{compute_spectral_similarity}{missing,missing,missing,data.frame,data.frame}(sp1, sp2)

\S4method{compute_spectral_similarity}{mcnebula,logical,logical,missing,missing}(x, within_nebula, recompute)
}
\arguments{
\item{x}{\linkS4class{mcnebula} object.}

\item{within_nebula}{logical. If \code{TRUE},
only 'features' that exist in a Child-Nebula are compared
for spectral similarity. Data of 'nebula_index' (\code{nebula_index(object)})
would be used for assigning and combining the 'features' of comparison.}

\item{recompute}{logical. If \code{TRUE}, discard the existing data in the object,
and recompute the spectral similarity.}

\item{sp1}{data.frame. An additional channel for comparing two spectrum.
Contains 'mz' and 'intensity' for spectral comparison.}

\item{sp2}{data.frame. An additional channel for comparing two spectrum.
Contains 'mz' and 'intensity' for spectral comparison.}
}
\description{
These are methods stripped from \link[MSnbase:compareSpectra-methods]{MSnbase::compareSpectra}.
The unnecessary parts were removed, \code{\link[=compute_spectral_similarity]{compute_spectral_similarity()}} only
calculate the 'dotproduct' for two spectra and get the similarity value.
It allows faster results for batch comparisons.

\code{compute_spectral_similarity()}: get the default parameters for the method
\code{compute_spectral_similarity}.

\code{compute_spectral_similarity(x, ...)}:
use the default parameters whatever 'missing'
while performing the method \code{compute_spectral_similarity}.
}
\examples{
\dontrun{
  test <- mcn_5features
  
  ## the previous steps
  test1 <- filter_structure(test)
  test1 <- create_reference(test1)
  test1 <- filter_formula(test1, by_reference = T)
  test1 <- create_stardust_classes(test1)
  test1 <- create_features_annotation(test1)
  test1 <- cross_filter_stardust(test1, 2, 1)
  test1 <- create_nebula_index(test1)
  
  test1 <- compute_spectral_similarity(test1)
  ## see results
  spectral_similarity(test1)
  ## or
  reference(test1)$spectral_similarity
  ## or
  reference(mcn_dataset(test1))$spectral_similarity
  
  ## compare the two spectra individually
  spectra <- latest(test1, "project_dataset", ".f3_spectra")
  data1 <- dplyr::select(
    dplyr::filter(spectra, .features_id == "gnps1537"),
    mz, int.
  )
  data2 <- dplyr::select(
    dplyr::filter(spectra, .features_id == "gnps1539"),
    mz, int.
  )
  e1 <- compute_spectral_similarity(sp1 = data1, sp2 = data2)
  e1
  # [1] 0.7670297
  
  ## MSnbase
  if (requireNamespace("MSnbase")) {
    MSnbase::compareSpectra
    spec1 <- new("Spectrum2", mz = data1$mz, intensity = data1$int.)
    spec2 <- new("Spectrum2", mz = data2$mz, intensity = data2$int.)
    e2 <- MSnbase::compareSpectra(spec1, spec2, fun = "dotproduct")
    identical(e1, e2)
  }
}
}
\seealso{
\code{\link[MSnbase:compareSpectra-methods]{MSnbase::compareSpectra()}}.
}
