% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-activate_nebulae.R
\name{set_nodes_color-methods}
\alias{set_nodes_color-methods}
\alias{set_nodes_color}
\alias{set_nodes_color,mcnebula,character,data.frame,missing-method}
\alias{set_nodes_color,mcnebula,character,missing,missing-method}
\alias{set_nodes_color,mcnebula,missing,missing,logical-method}
\title{Custom defined nodes color in Nebulae (network)}
\usage{
\S4method{set_nodes_color}{mcnebula,character,data.frame,missing}(x, attribute, extra_data)

\S4method{set_nodes_color}{mcnebula,character,missing,missing}(x, attribute)

\S4method{set_nodes_color}{mcnebula,missing,missing,logical}(x, use_tracer)
}
\arguments{
\item{x}{\linkS4class{mcnebula} object.}

\item{attribute}{character. The attribute specified to colorful the nodes.
Can be continues attribute or discrete attribute, exist in
'layout_ggraph' object or data of \code{extra_data}.
Related with \code{\link[ggplot2:scale_gradient]{ggplot2::scale_fill_gradientn()}} and \code{\link[ggplot2:scale_manual]{ggplot2::scale_fill_manual()}}.
If the attribute is continues, colors in \code{palette_gradient(object)} would
be used. If the attribute is discrete, use colors in \code{palette_set(object)}.}

\item{extra_data}{data.frame. Extra data used for setting nodes color.
The data.frame must contains column of '.features_id'.}

\item{use_tracer}{logical. If \code{TRUE}, hightlight the 'top' 'features'
marked in 'nebula_index' data. See \code{\link[=set_tracer]{set_tracer()}}.}
}
\description{
Custom defined the nodes color for visualizing.
Run after \code{\link[=activate_nebulae]{activate_nebulae()}}.
}
\examples{
\dontrun{
  test <- mcn_5features
  
  ## the previous steps
  test1 <- filter_structure(test)
  test1 <- create_reference(test1)
  test1 <- filter_formula(test1, by_reference = T)
  test1 <- create_stardust_classes(test1)
  test1 <- create_features_annotation(test1)
  test1 <- cross_filter_stardust(test1, 2, 1)
  test1 <- create_nebula_index(test1)
  test1 <- compute_spectral_similarity(test1)
  test1 <- create_parent_nebula(test1, 0.01, T)
  test1 <- create_child_nebulae(test1, 0.01, 5)
  test1 <- create_parent_layout(test1)
  test1 <- create_child_layouts(test1)
  test1 <- activate_nebulae(test1)
  
  ids <- features_annotation(test1)$.features_id
  extra_data <- data.frame(
    .features_id = ids,
    attr_1 = rnorm(length(ids), 100, 50),
    attr_2 = sample(c("special", "normal"), 5, replace = T)
  )
  
  test1 <- set_nodes_color(test1, "attr_1", extra_data)
  visualize(test1, 1)
  visualize_all(test1)
  ## set labal of the legend
  export_name(test1) <- c(
    export_name(test1),
    attr_1 = "Continuous attribute",
    attr_2 = "Discrete attribute"
  )
  visualize_all(test1)
  
  test1 <- set_nodes_color(test1, "attr_2", extra_data)
  visualize(test1, 1)
  visualize_all(test1)
  
  ## set colors for 'tracer'
  test1 <- set_tracer(test1, ids[1:2])
  ## re-build Child-Nebulae
  test1 <- create_child_nebulae(test1, 0.01, 5)
  test1 <- create_child_layouts(test1)
  test1 <- activate_nebulae(test1)
  ## set color
  test1 <- set_nodes_color(test1, use_tracer = T)
  visualize_all(test1)
}
}
\seealso{
\code{\link[=activate_nebulae]{activate_nebulae()}}, \code{\link[=set_tracer]{set_tracer()}}...
}
