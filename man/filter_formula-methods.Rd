% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-filter_formula.R
\name{filter_formula-methods}
\alias{filter_formula-methods}
\alias{filter_formula}
\alias{filter_formula,missing,missing,missing-method}
\alias{filter_formula,mcnebula,ANY,ANY-method}
\alias{filter_formula,mcnebula,function,logical-method}
\title{Collate and filter candidates of chemical formula for each 'feature'}
\usage{
\S4method{filter_formula}{missing,missing,missing}()

\S4method{filter_formula}{mcnebula,ANY,ANY}(x, fun_filter, ..., by_reference)

\S4method{filter_formula}{mcnebula,`function`,logical}(x, fun_filter, ..., by_reference)
}
\arguments{
\item{x}{\linkS4class{mcnebula} object.}

\item{fun_filter}{function. Used to filter data.frame. The function would
run for candidates data (data.frame) for each 'features'. Such as:
\itemize{
\item \code{lapply(split(all_data, ~.features_id), fun_filter, ...)}.
}

This parameter provides an elegant and flexible way to filter data.
Users can pass function \code{\link[dplyr:filter]{dplyr::filter()}} to specify
any attributes condition to filter the data.}

\item{...}{Other parameters passed to the function \code{fun_filter}.}

\item{by_reference}{logical. Use \code{specific_candidate(object)} data to filter
candidates data. See \code{\link[=create_reference]{create_reference()}}.}
}
\description{
This methods provide an approach to
collate and filter chemical formula candidates data in baches for each
'feature'.

\code{filter_formula()}: get the default parameters for the method
\code{filter_formula}.

\code{filter_formula(x, ...)}: use the default parameters whatever 'missing'
while performing the method \code{filter_formula}.
}
\details{
In SIRIUS project directory, if the computation job has done,
each 'feature' has multiple prediction candidates whether for chemical formula,
structure, or classification. This method provides an approach to collate
and filter these data in baches. See \link{MCnebula2} for details of chemical
formula, structure and classification.
}
\examples{
\dontrun{
  test <- mcn_5features
  
  ## filter chemical formula candidates
  ## use default parameters
  test1 <- filter_formula(test)
  latest(test1)
  
  ## the default parameters:
  filter_formula()
  
  ## customized filtering
  ## according to score
  test1 <- filter_formula(test1, dplyr::filter, zodiac.score > 0.5)
  latest(test1)
  
  ## get top rank
  test1 <- filter_formula(test1, dplyr::filter, rank.formula <= 3)
  latest(test1)
  
  ## complex filtering
  test1 <- filter_formula(
    test1, dplyr::filter,
    ## molecular formula
    !grepl("N", mol.formula),
    ## mass error
    abs(error.mass) < 0.001
  )
  latest(test1)
  
  ## select columns
  test1 <- filter_formula(test1, dplyr::select, 1:5)
  latest(test1)
}
}
