% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-create_child_nebulae.R
\name{create_child_nebulae-methods}
\alias{create_child_nebulae-methods}
\alias{create_child_nebulae}
\alias{create_child_nebulae,missing,missing,missing,missing-method}
\alias{create_child_nebulae,mcnebula,ANY,ANY,ANY-method}
\alias{create_child_nebulae,mcnebula,numeric,numeric,logical-method}
\title{Gather data to create Child-Nebulae}
\usage{
\S4method{create_child_nebulae}{missing,missing,missing,missing}()

\S4method{create_child_nebulae}{mcnebula,ANY,ANY,ANY}(x, edge_cutoff, max_edge_number, use_tracer)

\S4method{create_child_nebulae}{mcnebula,numeric,numeric,logical}(x, edge_cutoff, max_edge_number, use_tracer)
}
\arguments{
\item{x}{\linkS4class{mcnebula} object.}

\item{edge_cutoff}{numeric(1). Value in (0,1). Set a threshold to
create edges upon similarity value of 'spectral_similarity' data.}

\item{max_edge_number}{numeric(1).
For nodes (features) in each Child-Nebulae (i.e. network), the maximum number of
edges link with. If the number exceeds the limitation, only edges representing higher
spectral similarity would be retained.}

\item{use_tracer}{logical.
If \code{TRUE}, 'tracer' in 'nebula_index' data would be used to filter out
Child-Nebulae: a Child-Nebula without any 'feature' being marked as 'tracer',
this Child-Nebula would be filtered out. See \code{\link[=create_nebula_index]{create_nebula_index()}}.}
}
\description{
Similar to \code{\link[=create_parent_nebula]{create_parent_nebula()}}, gather 'spectral_similarity' data and
and 'features_annotation' data; but additionally, use 'nebula_index' data
to group 'features' by chemical classes. Each chemical classes in 'nebula_index'
data would lead to a 'igraph' object.

\code{create_child_nebulae()}: get the default parameters for the method
\code{create_child_nebulae}.

\code{create_child_nebulae(x, ...)}:
use the default parameters whatever 'missing'
while performing the method \code{create_child_nebulae}.
}
\examples{
\dontrun{
  test <- mcn_5features
  
  ## the previous steps
  test1 <- filter_structure(test)
  test1 <- create_reference(test1)
  test1 <- filter_formula(test1, by_reference = T)
  test1 <- create_stardust_classes(test1)
  test1 <- create_features_annotation(test1)
  test1 <- cross_filter_stardust(test1, 2, 1)
  test1 <- create_nebula_index(test1)
  test1 <- compute_spectral_similarity(test1)
  
  ## default parameters
  create_child_nebulae()
  
  test1 <- create_child_nebulae(test1, 0.01)
  ## see results
  igraph(child_nebulae(test1))
  ## write output for 'Cytoscape' or other network software
  tmp <- paste0(tempdir(), "/child_nebulae/")
  dir.create(tmp)
  res <- igraph(child_nebulae(test1))
  lapply(
    names(res),
    function(name) {
      igraph::write_graph(
        res[[name]],
        file = paste0(tmp, name, ".graphml"),
        format = "graphml"
      )
    }
  )
  list.files(tmp)
  
  unlink(tmp, T, T)
}
}
\seealso{
\code{\link[=compute_spectral_similarity]{compute_spectral_similarity()}}, \code{\link[=create_features_annotation]{create_features_annotation()}},
\code{\link[=create_nebula_index]{create_nebula_index()}},
\code{\link[igraph:graph_from_data_frame]{igraph::graph_from_data_frame()}}.
}
