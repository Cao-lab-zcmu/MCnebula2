% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-filter_structure.R
\name{filter_structure-methods}
\alias{filter_structure-methods}
\alias{filter_structure}
\alias{filter_structure,missing,missing,missing-method}
\alias{filter_structure,mcnebula,ANY,ANY-method}
\alias{filter_structure,mcnebula,function,logical-method}
\title{Collate and filter candidates of chemical structure for each 'feature'}
\usage{
\S4method{filter_structure}{missing,missing,missing}()

\S4method{filter_structure}{mcnebula,ANY,ANY}(x, fun_filter, ..., by_reference)

\S4method{filter_structure}{mcnebula,`function`,logical}(x, fun_filter, ..., by_reference)
}
\arguments{
\item{x}{\linkS4class{mcnebula} object.}

\item{fun_filter}{function. Used to filter data.frame. The function would
run for candidates data (data.frame) for each 'features'. Such as:
\itemize{
\item \code{lapply(split(all_data, ~.features_id), fun_filter, ...)}.
}

This parameter provides an elegant and flexible way to filter data.
Users can pass function \code{\link[dplyr:filter]{dplyr::filter()}} to specify
any attributes condition to filter the data.}

\item{...}{Other parameters passed to the function \code{fun_filter}.}

\item{by_reference}{logical. Use \code{specific_candidate(object)} data to filter
candidates data. See \code{\link[=create_reference]{create_reference()}}.}
}
\description{
This methods provide an approach to
collate and filter chemical structure candidates data in baches for each
'feature'.

\code{filter_structure()}: get the default parameters for the method
\code{filter_structure}.

\code{filter_structure(x, ...)}: use the default parameters whatever 'missing'
while performing the method \code{filter_structure}.
}
\details{
See details in \code{\link[=filter_formula]{filter_formula()}}.
}
\examples{
\dontrun{
  test <- mcn_5features
  
  ## filter chemical structure candidates
  ## use default parameters
  test1 <- filter_structure(test)
  latest(test1)
  
  ## the default parameters:
  filter_structure()
  
  ## customized filtering
  ## according to score
  test1 <- filter_structure(test1, dplyr::filter, tani.score > 0.4)
  latest(test1)
  
  ## get top rank
  test1 <- filter_structure(test1, dplyr::filter, rank.structure <= 3)
  latest(test1)
  
  ## complex filtering
  test1 <- filter_structure(
    test1, dplyr::filter,
    ## molecular formula
    !grepl("N", mol.formula),
    ## Tanimoto similarity
    tani.score > 0.4
  )
  latest(test1)
  
  ## select columns
  test1 <- filter_structure(test1, dplyr::select, 1:5)
  latest(test1)
}
}
