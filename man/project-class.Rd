% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-project.R
\docType{class}
\name{project-class}
\alias{project-class}
\alias{.project}
\alias{project}
\alias{project_version,ANY-method}
\alias{project_version}
\alias{project_version<-,ANY-method}
\alias{project_version<-}
\alias{project_path,ANY-method}
\alias{project_path}
\alias{project_path<-,ANY-method}
\alias{project_path<-}
\alias{file_name,ANY-method}
\alias{file_name}
\alias{file_api,ANY-method}
\alias{file_api}
\alias{attribute_name,ANY-method}
\alias{attribute_name}
\alias{metadata,ANY-method}
\alias{project_metadata}
\alias{methods_read,ANY-method}
\alias{methods_read}
\alias{methods_format,ANY-method}
\alias{methods_format}
\alias{methods_match,ANY-method}
\alias{methods_match}
\alias{match.candidates_id,ANY-method}
\alias{match.candidates_id}
\alias{match.features_id,ANY-method}
\alias{match.features_id}
\alias{get_upper_dir_subscript,ANY,character,missing-method}
\alias{get_upper_dir_subscript}
\title{Collection of Interface for extracting data from raw directory}
\usage{
\S4method{project_version}{ANY}(x)

\S4method{project_version}{ANY}(x) <- value

\S4method{project_path}{ANY}(x)

\S4method{project_path}{ANY}(x) <- value

\S4method{file_name}{ANY}(x)

\S4method{file_api}{ANY}(x)

\S4method{attribute_name}{ANY}(x)

\S4method{metadata}{ANY}(x)

\S4method{methods_read}{ANY}(x)

\S4method{methods_format}{ANY}(x)

\S4method{methods_match}{ANY}(x)

\S4method{match.candidates_id}{ANY}(x)

\S4method{match.features_id}{ANY}(x)

\S4method{get_upper_dir_subscript}{ANY,character,missing}(x, subscript)
}
\arguments{
\item{x}{Maybe object of class inherit \linkS4class{project}.}

\item{value}{The value for the slot.}

\item{subscript}{the "subscript" name of file. See \linkS4class{subscript}.}
}
\description{
This is a class object designed to extract files in the project directory.
Its responsibility is to describe the name,
path and reading method of the file under the project directory;
Use these information to extract and store data.

\code{project_version}, \code{project_version<-}: getter and setter
for the \code{project_version} slot of the object.

\code{project_path}, \code{project_path<-}: getter and setter
for the \code{project_path} slot of the object.

\code{file_name}, \code{file_api}, \code{attribute_name}:
fast channel to obtain
the downstream slot. e.g., getter
for the \code{file_name} slot in sub-object
of \code{project_conformation} slot of the object. Equals:
\itemize{
\item \code{file_name(project_conformation(object))}
\item \code{file_name(object)}.
}

\code{metadata}: fast channel to obtain
the downstream slot, getter
for the \code{metadata} slot in sub-object
of \code{project_metadata} slot of the object. Equals:
\itemize{
\item \code{metadata(project_metadata(object))}
\item \code{metadata(object)}.
}

\code{methods_read}, \code{methods_format}, \code{methods_match}:
fast channel to obtain
the downstream slot. e.g., getter
for the \code{methods_read} slot in sub-object
of \code{project_api} slot of the object. Equals:
\itemize{
\item \code{methods_read(project_api(object))}
\item \code{methods_read(object)}.
}

\code{match.candidates_id}, \code{match.features_id}:
fast channel to obtain
data (mostly 'tbl' or 'data.frame') inside the downstream slot ('list'), getter
for the data named \code{match.candidates_id} in
\code{methods_match} slot (a 'list') in sub-object
of \code{project_api} slot of the object. Equals:
\itemize{
\item \code{methods_match(project_api(object))$match.candidates_id}
\item \code{match.candidates_id(object)}.
}

\code{get_upper_dir_subscript}: Get the "subscript" name of the folder.
}
\details{
It is a collection of classes whose names start with "project_":
\itemize{
\item \linkS4class{project_conformation}: The name, path and attribute name of the file are described.
\item \linkS4class{project_api}: Functions for reading and formatting data are provided.
\item \linkS4class{project_metadata}: Metadata, which records the files stored in the project directory.
\item \linkS4class{project_dataset}: The extracted data is stored here.
}

The above class objects are coordinated into a whole through the "subscript" name
(see \linkS4class{subscript}).
For example, when a command (\code{collate_data(x, ".f3_fingerid")}) requests to
extract the files of subscript of ".f3_fingerid", the data extraction module:
\itemize{
\item from slot of \code{project_conformation},
get the file name (pattern string) and path of subscript of ".f3_fingerid";
\item match the files under the path with the pattern string (i.e., get the metadata of the files),
then stored the metadata into slot of \code{project_metadata};
\item from slot of \code{project_api}, get the functions of subscript of ".f3_fingerid";
\item use these functions to read and format the data in batches;
\item store the extracted data into slot of \code{project_dataset}.
}

This class is mainly designed for extracting files under the SIRIUS project directory.
These files are: mainly "tables" that can be read through functions such as \code{read.table};
numerous and have multiple directories; need to be processed in batches.
SIRIUS project may alter the name and path of internal files during version changes,
which is in fact deadly for MCnebula2.
To make the data extraction module of MCnebula2 free from version issues,
this class object is designed to flexibly handle the extraction of internal files.
Most contents need to be considered by MCnebula2 developers.
The only thing users need to know:
slot of \linkS4class{project_dataset} object stores the extracted data.
}
\section{Slots}{

\describe{
\item{\code{project_version}}{character(1). The target project version. e.g., "sirius.v4".}

\item{\code{project_path}}{character(1). The target project path.}

\item{\code{project_conformation}}{\linkS4class{project_conformation} object.}

\item{\code{project_metadata}}{\linkS4class{project_metadata} object.}

\item{\code{project_api}}{\linkS4class{project_api} object.}

\item{\code{project_dataset}}{\linkS4class{project_dataset} object.}
}}

\examples{
\dontrun{
new('project', ...)
}
\dontrun{
object <- initialize_mcnebula(mcnebula())
get_upper_dir_subscript(object, ".f3_fingerid")
}
}
\seealso{
Other projects: 
\code{\link{project_api-class}},
\code{\link{project_conformation-class}},
\code{\link{project_dataset-class}},
\code{\link{project_metadata-class}}
}
\concept{projects}
