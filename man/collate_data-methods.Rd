% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extraMethods-collate_data.R
\name{collate_data-methods}
\alias{collate_data-methods}
\alias{collate_data}
\alias{collate_data,missing,missing,missing-method}
\alias{collate_data,ANY,ANY,ANY-method}
\alias{collate_data,ANY,character,function-method}
\title{Extract and format data from raw project directory}
\usage{
\S4method{collate_data}{missing,missing,missing}()

\S4method{collate_data}{ANY,ANY,ANY}(x, subscript, fun_collate, ...)

\S4method{collate_data}{ANY,character,`function`}(x, subscript, fun_collate, ...)
}
\arguments{
\item{x}{\linkS4class{project} object or other class object inheriting it.}

\item{subscript}{character(1). See \linkS4class{subscript}.}

\item{fun_collate}{function.
Used to extract and format the data from raw project directory.
The default is \code{MCnebula2:::.collate_data.msframe}.}

\item{...}{Other parameters passed to the fun_collate.}
}
\description{
The primary method used to extract data from the raw project directory.
By specifying \linkS4class{subscript}, this method reads all corresponding files,
followed by gathering and formating the data, then stores these data in the slot
(\code{dataset(project_dataset(object))}).

\code{collate_data()}: get the default parameters for the method
\code{collate_data}.

\code{collate_data(x, ...)}: use the default parameters whatever 'missing'
while performing the method \code{collate_data}.
}
\details{
This methods requires the name and path of the file in the raw project directory,
as well as the reading function; These are recorded in \linkS4class{project}.
}
\note{
Normally, users do not need to use this method for MCnebula2 analysis.
\code{\link[=filter_formula]{filter_formula()}}, \code{\link[=filter_structure]{filter_structure()}}, \code{\link[=filter_ppcp]{filter_ppcp()}}
provide more understandable usage.
}
\examples{
\dontrun{
  ## The raw data used for the example
  tmp <- paste0(tempdir(), "/temp_data")
  dir.create(tmp)
  eg.path <- system.file("extdata", "raw_instance.tar.gz",
                         package = "MCnebula2")
  
  utils::untar(eg.path, exdir = tmp)
  
  ## initialize 'mcnebula' object
  test <- mcnebula()
  test <- initialize_mcnebula(test, "sirius.v4", tmp)
  
  ## extract candidates data in SIRIUS project directory
  ## chemical structure
  test <- collate_data(test, ".f3_fingerid")
  latest(project_dataset(test))
  
  ## chemical formula
  test <- collate_data(test, ".f2_formula")
  latest(project_dataset(test))
  
  ## chemical classes
  test <- collate_data(test, ".f3_canopus")
  latest(project_dataset(test))
  
  ## mz and rt
  test <- collate_data(test, ".f2_info")
  latest(project_dataset(test))
  
  ## classification description
  test <- collate_data(test, ".canopus")
  
  ## the extracted data in 'mcnebula'
  dataset(project_dataset(test))
  entity(dataset(project_dataset(test))$.f3_fingerid)
  
  unlink(tmp, T, T)
}
}
