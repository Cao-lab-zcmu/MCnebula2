% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-section.R, R/functions-report.R
\docType{class}
\name{code_block-class}
\alias{code_block-class}
\alias{.code_block}
\alias{code_block}
\alias{code_block_table-class}
\alias{.code_block_table}
\alias{code_block_table}
\alias{code_block_figure-class}
\alias{.code_block_figure}
\alias{code_block_figure}
\alias{show,code_block-method}
\alias{show}
\alias{show,code_block_table-method}
\alias{show,code_block_figure-method}
\alias{show,heading-method}
\alias{show,section-method}
\alias{code_block,ANY-method}
\alias{code_block<-,ANY-method}
\alias{code_block<-}
\alias{codes,code_block-method}
\alias{codes}
\alias{codes<-,code_block-method}
\alias{codes<-}
\alias{new_code_block,character,character,list,logical,function-method}
\alias{new_code_block}
\alias{new_code_block,missing,missing,missing,missing,missing-method}
\alias{new_code_block,ANY,ANY,ANY,ANY,ANY-method}
\alias{new_code_block_figure,character-method}
\alias{new_code_block_figure}
\alias{new_code_block_table,character-method}
\alias{new_code_block_table}
\alias{call_command,code_block-method}
\alias{call_command}
\alias{get_ref}
\title{Sequestrate code and setting run parameters.}
\usage{
\S4method{show}{code_block}(object)

\S4method{show}{code_block_table}(object)

\S4method{show}{code_block_figure}(object)

\S4method{show}{heading}(object)

\S4method{show}{section}(object)

\S4method{code_block}{ANY}(x)

\S4method{code_block}{ANY}(x) <- value

\S4method{codes}{code_block}(x)

\S4method{codes}{code_block}(x) <- value

\S4method{new_code_block}{character,character,list,logical,function}(language, codes, args, prettey, fun_prettey)

\S4method{new_code_block}{missing,missing,missing,missing,missing}()

\S4method{new_code_block}{ANY,ANY,ANY,ANY,ANY}(language, codes, args, prettey, fun_prettey)

\S4method{new_code_block_figure}{character}(name, caption, ...)

\S4method{new_code_block_table}{character}(name, ...)

\S4method{call_command}{code_block}(x)

get_ref(object, type = c("fig", "tab"))
}
\arguments{
\item{object}{\linkS4class{code_block_figure} or \linkS4class{code_block_table} object.}

\item{value}{The value for the slot.}

\item{language}{character(1). For slot \code{command_name}.}

\item{codes}{character. For slot \code{codes}.}

\item{args}{list. For slot \code{command_args}.}

\item{prettey}{logical. If ture, use \code{\link[styler:style_text]{styler::style_text()}} to pretty the codes.}

\item{fun_prettey}{function. Default is \code{styler::style_text}.}

\item{name}{character(1). For cross-reference in document.
See \url{https://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.html#cross-ref}.}

\item{caption}{character(1). Caption of figure display in document.}

\item{...}{Other parameters passed to \code{\link[=new_code_block]{new_code_block()}}.}

\item{type}{character. "fig" or "tab".}
}
\description{
Mainly desiged for R code block.
The job of this class object is to record the codes and the running parameters
of its source language or program;
These information can then be output as formatted code block text (use \code{\link[=call_command]{call_command()}}).

\code{code_block_table}: class inherit from \code{code_block}, with
default values for slot \code{command_args} facilitate showing table in document.

\code{code_block_figure}: class inherit from \code{code_block}, with
default values for slot \code{command_args} facilitate showing figure in document.

\code{code_block}, \code{code_block<-}: getter and setter
for the \code{code_block} slot of the object.

\code{codes}, \code{codes<-}: getter and setter
for the \code{codes} slot of the object.

\code{new_code_block}: create a \linkS4class{code_block} object.

\code{new_code_block()}: get the default parameters
for the method \code{new_code_block}.

\code{new_code_block(x, ...)}: use the default parameters whatever 'missing'
while performing the method \code{new_code_block}.

\code{new_code_block_figure}: create \linkS4class{code_block_figure} object.
This methods simplified parameter settings for displaying figures in documents.

\code{new_code_block_table}: create \linkS4class{code_block_table} object.
This methods simplified parameter settings for displaying table in documents.

\code{call_command}: Format 'code_block' object as character.

\code{get_ref}: get the string for cross-reference.
}
\section{Slots}{

\describe{
\item{\code{codes}}{character. Codes.}

\item{\code{command_name}}{character(1). Program or language. e.g., "r".}

\item{\code{command_function}}{function. Used for gather the codes and args as code block.}

\item{\code{command_args}}{list. Args passed to program.}
}}

\examples{
\dontrun{
  ## general
  codes <- "df <- data.frame(x = 1:10)
    df<-dplyr::mutate(df,y=x*1.5)\%>\%
    dplyr::filter(x >= 5)
    p <- ggplot(df)+
    geom_point(aes(x=x,y=y))
    p"
  block <- new_code_block("r", codes, list(eval = T, echo = T, message = T))
  ## see results
  block
  call_command(block)
  writeLines(call_command(block))
  
  ## figure
  fig_block <- new_code_block_figure(
    "plot1",
    "this is a caption",
    codes = codes
  )
  ## see results
  fig_block
  writeLines(call_command(fig_block))
  command_args(fig_block)
  cat(get_ref(fig_block), "\n")
  
  ## table
  codes <- "df <- data.frame(x = 1:10) \%>\% 
    dplyr::mutate(y = x, z = x * y)
    knitr::kable(df, format = 'markdown', caption = 'this is a caption') "
  tab_block <- new_code_block_table("table1", codes = codes)
  ## see results
  tab_block
  cat(get_ref(tab_block), "\n")
  
  ## default parameters
  new_code_block()
  
}
\dontrun{
  ## general
  codes <- "df <- data.frame(x = 1:10)
    df<-dplyr::mutate(df,y=x*1.5)\%>\%
    dplyr::filter(x >= 5)
    p <- ggplot(df)+
    geom_point(aes(x=x,y=y))
    p"
  block <- new_code_block("r", codes, list(eval = T, echo = T, message = T))
  ## see results
  block
  call_command(block)
  writeLines(call_command(block))
  
  ## figure
  fig_block <- new_code_block_figure(
    "plot1",
    "this is a caption",
    codes = codes
  )
  ## see results
  fig_block
  writeLines(call_command(fig_block))
  command_args(fig_block)
  cat(get_ref(fig_block), "\n")
  
  ## table
  codes <- "df <- data.frame(x = 1:10) \%>\% 
    dplyr::mutate(y = x, z = x * y)
    knitr::kable(df, format = 'markdown', caption = 'this is a caption') "
  tab_block <- new_code_block_table("table1", codes = codes)
  ## see results
  tab_block
  cat(get_ref(tab_block), "\n")
  
  ## default parameters
  new_code_block()
  
}
}
\seealso{
\code{\link{command-class}}.
\url{https://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.html#cross-ref}.
\url{https://bookdown.org/yihui/rmarkdown/compile.html}.

Other call_commands: 
\code{\link{command-class}},
\code{\link{ggset-class}},
\code{\link{report-class}},
\code{\link{section-class}}
}
\concept{call_commands}
